{"version":3,"sources":["common/theme.js","bar/index.js","utils/HyperScale.js","capture/index.js","App.js","serviceWorker.js","common/reducers.js","common/store.js","index.js"],"names":["theme","createMuiTheme","palette","type","primary","main","grey","secondary","blueGrey","Bar","Fragment","AppBar","Toolbar","Typography","variant","HyperScale","config","value","inputShape","inputs","kwargs","input","Array","isArray","this","invokeCallHook","tf","baseConfig","Object","assign","layers","Layer","onImage","x","y","box","width","height","useStyle","makeStyles","root","marginTop","spacing","textAlign","justifyContent","justifyItems","imageArea","position","imageContent","overlay","top","left","resultArea","resultPaper","padding","croppedImg","border","borderWidth","marginLeft","margin","resultList","overflow","backgroundColor","fade","common","white","listIconText","color","Capture","useState","url","setUrl","detections","setDetections","faceImgData","setFaceImgData","facenet","setFacenet","faceList","setFaceList","classes","imageRef","useRef","canvasRef","api_urls","useEffect","faceapi","ssdMobilenetv1","loadFromUri","then","res","console","log","registerClass","loadLayersModel","model","className","Container","acceptedFiles","filesLimit","onChange","files","length","reader","FileReader","readAsDataURL","onload","result","src","ref","onLoad","image","current","displaySize","Image","a","resizedDetections","option","boxColor","label","drawLabelOptions","fontColor","newDetections","i","org_det","det","_box","_x","_y","_width","_height","org_box","push","DrawBox","draw","onClick","e","rect","target","getBoundingClientRect","clientX","clientY","img","copy_cvs","document","createElement","getContext","drawImage","data","toDataURL","input_tensor","fromPixels","sub","div","predict","emb","array","post_data","method","body","JSON","stringify","vector","headers","fetch","json","res_json","Paper","Grid","container","item","xs","List","map","face","index","ListItem","key","button","component","href","ListItemIcon","ListItemText","ListItemSecondaryAction","Avatar","alt","Divider","App","CssBaseline","Boolean","window","location","hostname","match","createRootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","store","createStore","compose","applyMiddleware","routerMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wcAIaA,EAAQC,YAAe,CAChCC,QAAS,CACLC,KAAM,OACNC,QAAS,CACLC,KAAKC,IAAK,MAEdC,UAAUC,O,oDCcHC,EAdH,WACR,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,kB,+NC2BLC,E,kDApCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQD,EAAM,MAFJ,E,+DAKAE,GACf,MAAO,CAACA,EAAW,GAAIA,EAAW,GAAIA,EAAW,GAAIA,EAAW,M,2BAG7DC,EAAQC,GACX,IAAIC,EAAQF,EAQZ,OAPIG,MAAMC,QAAQF,KAChBA,EAAQA,EAAM,IAEhBG,KAAKC,eAAeN,EAAQC,GAClBM,KAAOL,EAAMK,KAAUF,KAAKP,U,kCAWtC,IAAMD,EAAS,CACbC,MAAMO,KAAKP,OAEPU,EAAU,kEAEhB,OADAC,OAAOC,OAAOb,EAAQW,GACfX,K,iCATP,MAAO,iB,GAvBUc,IAAOC,OCqB5BC,EAAU,SAACC,EAAEC,EAAEC,GACf,OAAQF,GAAGE,EAAIF,GAAOA,GAAGE,EAAIF,EAAEE,EAAIC,OAAWF,GAAGC,EAAID,GAAOA,GAAGC,EAAID,EAAEC,EAAIE,QAGvEC,EAAWC,aAAW,SAAAvC,GAAK,MAAG,CAChCwC,KAAK,CACDC,UAAUzC,EAAM0C,QAAQ,IACxBC,UAAU,SACVC,eAAgB,SAChBC,aAAc,UAElBC,UAAU,CACNL,UAAUzC,EAAM0C,QAAQ,GACxBK,SAAS,WACTX,MAAM,OAEVY,aAAa,CACTZ,MAAM,QAEVa,QAAQ,CACJF,SAAS,WACTG,IAAK,EACLC,KAAM,EACNf,MAAM,QAEVgB,WAAW,CACPX,UAAUzC,EAAM0C,QAAQ,IAE5BW,YAAY,CACRC,QAAQtD,EAAM0C,QAAQ,IAE1Ba,WAAW,CACPC,OAAO,QACPC,YAAY,MACZC,WAAY,OACZC,OAAO,QAGXC,WAAW,CACPC,SAAU,OACVd,SAAU,WACVe,gBAAgBC,YAAK/D,EAAME,QAAQ8D,OAAOC,MAAM,MAEpDC,aAAa,CACTC,MAAM,aAsLCC,EAlLC,WAAK,IAAD,EACKC,mBAAS,IADd,mBACTC,EADS,KACLC,EADK,OAEmBF,mBAAS,IAF5B,mBAETG,EAFS,KAEEC,EAFF,OAIqBJ,mBAAS,MAJ9B,mBAITK,EAJS,KAIGC,EAJH,OAKaN,mBAAS,MALtB,mBAKTO,EALS,KAKDC,EALC,OAMeR,mBAAS,IANxB,mBAMTS,EANS,KAMAC,EANA,KAQVC,EAAU1C,IACV2C,EAAWC,iBAAO,MAClBC,EAAYD,iBAAO,MAEnBE,EACU,6BADVA,EAEY,iCAgBlB,OAbAC,qBAAU,WACNC,IAAaC,eAAeC,YAAY,YAAYC,MAAK,SAAAC,GACrDC,QAAQC,IAAI,qBAElB,IAEFP,qBAAU,WACN3D,KAAiBmE,cAAc9E,GAC/B+E,YAAgB,iCAAiCL,MAAK,SAAAM,GAClDlB,EAAWkB,QAEjB,IAGE,kBAAC,IAAMrF,SAAP,KACI,yBAAKsF,UAAWhB,EAAQxC,MACpB,kBAACyD,EAAA,EAAD,KACI,kBAAC,IAAD,CACIC,cAAe,CAAC,aAAc,YAAa,aAC3CC,WAAY,EACZC,SAAU,SAACC,GACP,GAAGA,EAAMC,OAAO,EAAE,CACd,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,cAAcJ,EAAM,IAC3BE,EAAOG,OAAS,WACZnC,EAAOgC,EAAOI,cAIlBpC,EAAO,IACPI,EAAe,OAK3B,yBAAKqB,UAAWhB,EAAQlC,WACpB,yBAAK8D,IAAKtC,EACN0B,UAAWhB,EAAQhC,aACnB6D,IAAK5B,EACL6B,OAAQ,WACJ,IAMIC,EALA1E,GADA0E,EAAQ9B,EAAS+B,SACF3E,OAEb4E,EAAc,CAAC7E,MADT2E,EAAM3E,MACSC,UAC3B8C,EAAU6B,QAAQ3E,OAASA,EAC3BiD,IAAwBH,EAAU6B,QAASC,IACvCF,EAAQ,IAAIG,OACVN,IAAMtC,EACZyC,EAAML,OAAN,sBAAe,4CAAAS,EAAA,sEACY7B,IAAuByB,GADnC,OAOX,IANIvC,EADO,OAEL4C,EAAoB9B,IAAsBd,EAAYyC,GAC5DtB,QAAQC,IAAI,aAAapB,EAAW4C,GAEhCC,EAAS,CAACC,SAAS,yBAAyBC,MAAM,QAAQC,iBAAiB,CAACC,UAAU,2BACpFC,EAAgB,GACdC,EAAE,EAAEA,EAAEnD,EAAW8B,OAAOqB,IACxBC,EAAUpD,EAAWmD,GACrBE,EAAMT,EAAkBO,GAEtBxF,EAAM,CAAEF,EAAG4F,EAAIC,KAAKC,GAAI7F,EAAG2F,EAAIC,KAAKE,GAAI5F,MAAMyF,EAAIC,KAAKG,OAAQ5F,OAAQwF,EAAIC,KAAKI,SAChFC,EAAU,CAAElG,EAAG2F,EAAQE,KAAKC,GAAI7F,EAAG0F,EAAQE,KAAKE,GAAI5F,MAAMwF,EAAQE,KAAKG,OAAQ5F,OAAQuF,EAAQE,KAAKI,SAC1GR,EAAcU,KAAK,CAACjG,MAAIgG,YACV,IAAI7C,IAAa+C,QAAQlG,EAAIkF,GACnCiB,KAAKnD,EAAU6B,SAE3BvC,EAAciD,GAjBH,8CAqBvB,4BAAQ1B,UAAWhB,EAAQ/B,QAAS4D,IAAK1B,EAAWoD,QAAS,SAACC,GAK1D,IAJA,IAAIC,EAAOD,EAAEE,OAAOC,wBAChB1G,EAAIuG,EAAEI,QAAUH,EAAKtF,KACrBjB,EAAIsG,EAAEK,QAAUJ,EAAKvF,IAEjByE,EAAE,EAAEA,EAAEnD,EAAW8B,OAAOqB,IAAI,CAChC,IAAIE,EAAMrD,EAAWmD,GACrB,GAAG3F,EAAQC,EAAEC,EAAE2F,EAAI1F,KAAK,CACpB,IAAI2G,EAAM7D,EAAS+B,QACf7E,EAAM0F,EAAIM,QACVY,EAAWC,SAASC,cAAc,UACtCF,EAAS1G,OAASF,EAAIE,OACtB0G,EAAS3G,MAAQD,EAAIC,MACN2G,EAASG,WAAW,MAC1BC,UAAUL,EAAI3G,EAAIF,EAAEE,EAAID,EAAEC,EAAIC,MAAMD,EAAIE,OAAO,EAAE,EAAEF,EAAIC,MAAMD,EAAIE,QAC1E,IAAI+G,EAAOL,EAASM,YACpB1E,EAAeyE,GAEf,IAAIrC,EAAQ,IAAIG,MAChBH,EAAMH,IAAMwC,EACZrC,EAAM3E,MAAQ,IACd2E,EAAM1E,OAAS,IACf0E,EAAML,OAAN,sBAAe,gCAAAS,EAAA,6DACXxB,QAAQC,IAAIlE,MACR4H,EAAe5H,IAAW6H,WAAWxC,GAEzCuC,GADAA,EAAe5H,KAAc4H,EAAa,IACdE,IAAI,OAAOC,IAAI,KAJhC,SAKM7E,EAAQ8E,QAAQJ,GALtB,cAMXK,GADIA,EALO,QAMDF,IAAI/H,KAAQiI,IANX,UAOCA,EAAIC,QAPL,QAOXD,EAPW,OAQPE,EAAY,CACZC,OAAO,OACPC,KAAKC,KAAKC,UAAU,CAACC,OAAOP,IAC5BQ,QAAS,CACL,eAAgB,oCAGxBC,MAAMhF,EAAqB,QAAQyE,GAAWpE,MAAK,SAACC,GAAD,OAAQA,EAAI2E,UAAS5E,MAAK,SAAC6E,GAC1E3E,QAAQC,IAAI,WAAW0E,GACvBvF,EAAYuF,MAjBL,kDA6B3B5F,GACI,yBAAKsB,UAAWhB,EAAQ5B,YACpB,kBAACmH,EAAA,EAAD,CAAOvE,UAAWhB,EAAQ3B,aAC1B,kBAACmH,EAAA,EAAD,CAAMC,WAAS,EAAC/H,QAAS,GACrB,kBAAC8H,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,yBAAKvI,MAAO,GAAIC,OAAQ,GAAI2D,UAAWhB,EAAQzB,WAAYqD,IAAKlC,KAEpE,kBAAC8F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CAAM5E,UAAWhB,EAAQpB,YAEjBkB,EAAS+F,KAAI,SAACC,EAAKC,GAAN,OACT,kBAAC,IAAMrK,SAAP,KACI,kBAACsK,EAAA,EAAD,CAAUC,IAAKF,EAAOG,QAAM,EAACC,UAAU,IAAIC,KAAI,sDAAiDN,EAAK,KACjG,kBAACO,EAAA,EAAD,KACI,kBAACxK,EAAA,EAAD,CAAYmF,UAAWhB,EAAQd,cAC1B6G,EAAM,EADX,MAIJ,kBAACO,EAAA,EAAD,CAAclL,QAAS0K,EAAK,KAC5B,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,IAAKX,EAAK,GAAIlE,IAAKxB,EAAuB,UAAU0F,EAAK,OAGzE,kBAACY,EAAA,EAAD,mBC9MzCC,MAff,WAEE,OACI,kBAAC,IAAD,CAAkB3L,MAAOA,GACvB,kBAAC4L,EAAA,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,UCTQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCRSC,GALW,SAACC,GAAD,OAAaC,YAAgB,CACnDC,OAAQC,YAAcH,MCAbA,GAAUI,cCIvB,IAAMC,GDCYC,YACZP,GAAkBC,IAClBO,YACEC,YACEC,YAAiBT,OCH3BU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,IAAD,CAAiBL,QAASA,IACxB,kBAAC,EAAD,SAINnD,SAASgE,eAAe,SH+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1H,MAAK,SAAA2H,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5H,QAAQ4H,MAAMA,EAAMC,c","file":"static/js/main.6dae3a53.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\nimport {lightGreen,blueGrey,grey} from \"@material-ui/core/colors\"\n\n\nexport const theme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        primary: {\n            main:grey[800]\n        },\n        secondary:blueGrey\n    }\n});","import React, {useState} from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from \"@material-ui/core/Typography\"\n\n\n\n\nconst Bar = ()=>{\n    return (\n        <React.Fragment>\n            <AppBar>\n                <Toolbar>\n                    <Typography variant=\"h4\">\n                        FaceSearch\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </React.Fragment>\n    )\n}\n\nexport default Bar","import {layers} from '@tensorflow/tfjs';\nimport * as tf from '@tensorflow/tfjs-core';\n// import {} from '@tensorflow/tfjs-core';\n\n\nclass HyperScale extends layers.Layer{\n    constructor(config){\n        super(config);\n        this.value = config[\"value\"]\n    }\n\n    computeOutputShape(inputShape) {\n        return [inputShape[0], inputShape[1], inputShape[2], inputShape[3]]\n      }\n\n      call(inputs, kwargs) {\n        let input = inputs;\n        if (Array.isArray(input)) {\n          input = input[0];\n        }\n        this.invokeCallHook(inputs, kwargs);\n        var res = tf.mul(input,tf.scalar(this.value))\n        \n        //res.print()\n        return res\n      }\n\n      static get className() {\n        return 'HyperScale';\n      }\n      \n      getConfig(){\n        const config = {\n          value:this.value\n        }\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n      }\n\n}\n\nexport default HyperScale","import React,{useState,useRef, useEffect} from \"react\"\n\nimport { makeStyles,fade} from '@material-ui/core/styles';\n\nimport Grid from \"@material-ui/core/Grid\"\nimport Container from \"@material-ui/core/Container\"\nimport Typography from \"@material-ui/core/Typography\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\"\nimport Divider from \"@material-ui/core/Divider\"\nimport Avatar from \"@material-ui/core/Avatar\"\nimport Paper from \"@material-ui/core/Paper\"\n\nimport {DropzoneArea} from 'material-ui-dropzone'\n\nimport * as faceapi from \"face-api.js\"\nimport * as tf from '@tensorflow/tfjs-core';\n// const tf = require('@tensorflow/tfjs-core')\nimport {loadLayersModel} from \"@tensorflow/tfjs\"\n\nimport HyperScale from \"../utils/HyperScale\"\n\nvar onImage = (x,y,box)=>{\n    return (x>=box.x) && (x<=box.x+box.width) && (y>=box.y) && (y<=box.y+box.height)\n}\n\nconst useStyle = makeStyles(theme=>({\n    root:{\n        marginTop:theme.spacing(10),\n        textAlign:\"center\",\n        justifyContent: \"center\",\n        justifyItems: \"center\"\n    },\n    imageArea:{\n        marginTop:theme.spacing(3),\n        position:\"relative\",\n        width:\"60%\"\n    },\n    imageContent:{\n        width:\"100%\"\n    },\n    overlay:{\n        position:\"absolute\",\n        top: 0,\n        left: 0,\n        width:\"100%\"\n    },\n    resultArea:{\n        marginTop:theme.spacing(3)\n    },\n    resultPaper:{\n        padding:theme.spacing(3)\n    },\n    croppedImg:{\n        border:\"solid\",\n        borderWidth:\"2px\",\n        marginLeft: \"15px\",\n        margin:\"60px\"\n\n    },\n    resultList:{\n        overflow: 'auto',\n        position: 'relative',\n        backgroundColor:fade(theme.palette.common.white,0.15)\n    },\n    listIconText:{\n        color:\"white\"\n    }\n}))\n\nconst Capture = ()=>{\n    const [url,setUrl] = useState(\"\")\n    const [detections,setDetections] = useState([])\n    // const [imgData,setImgData] = useState(null)\n    const [faceImgData,setFaceImgData] = useState(null)\n    const [facenet,setFacenet] = useState(null)\n    const [faceList,setFaceList] = useState([])\n\n    const classes = useStyle()\n    const imageRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    const api_urls = {\n        \"face_api\": \"https://wiretechnology.net\",\n        \"static_api\": \"https://www.wiretechnology.net\"\n    }\n\n    useEffect(()=>{\n        faceapi.nets.ssdMobilenetv1.loadFromUri(\"./models\").then(res=>{\n            console.log(\"model loaded\")\n        })\n    },[])\n\n    useEffect(()=>{\n        tf.serialization.registerClass(HyperScale); \n        loadLayersModel(\"./tf-keras-facenet/model.json\").then(model=>{\n            setFacenet(model)\n        })\n    },[])\n\n    return (\n        <React.Fragment>\n            <div className={classes.root}>\n                <Container>\n                    <DropzoneArea\n                        acceptedFiles={['image/jpeg', 'image/png', 'image/bmp']}\n                        filesLimit={1}\n                        onChange={(files)=>{\n                            if(files.length>0){\n                                var reader = new FileReader()\n                                reader.readAsDataURL(files[0])\n                                reader.onload = ()=>{\n                                    setUrl(reader.result)\n                                }\n\n                            }else{\n                                setUrl(\"\")\n                                setFaceImgData(\"\")\n\n                            }\n                        }}\n                    />\n                    <div className={classes.imageArea}>\n                        <img src={url} \n                            className={classes.imageContent}\n                            ref={imageRef}\n                            onLoad={()=>{\n                                var image = imageRef.current\n                                var height = image.height\n                                var width = image.width\n                                const displaySize = {width,height}\n                                canvasRef.current.height = height\n                                faceapi.matchDimensions(canvasRef.current, displaySize)\n                                var image = new Image()\n                                image.src = url\n                                image.onload = async ()=>{\n                                    var detections = await faceapi.detectAllFaces(image)\n                                    const resizedDetections = faceapi.resizeResults(detections, displaySize)\n                                    console.log(\"detections\",detections,resizedDetections)\n\n                                    var option = {boxColor:\"rgba(255, 255, 255, 1)\",label:\"Click\",drawLabelOptions:{fontColor:\"rgba(200, 200, 200, 1)\"}}\n                                    const newDetections = []\n                                    for(var i=0;i<detections.length;i++){\n                                        var org_det = detections[i]\n                                        var det = resizedDetections[i]\n                    \n                                        const box = { x: det._box._x, y: det._box._y, width:det._box._width, height: det._box._height }\n                                        const org_box = { x: org_det._box._x, y: org_det._box._y, width:org_det._box._width, height: org_det._box._height }\n                                        newDetections.push({box,org_box})\n                                        var drawBox = new faceapi.draw.DrawBox(box,option)\n                                        drawBox.draw(canvasRef.current);\n                                    }\n                                    setDetections(newDetections)\n                                }\n                            }}\n                        />\n                        <canvas className={classes.overlay} ref={canvasRef} onClick={(e)=>{\n                            var rect = e.target.getBoundingClientRect();\n                            var x = e.clientX - rect.left;\n                            var y = e.clientY - rect.top;\n\n                            for(var i=0;i<detections.length;i++){\n                                var det = detections[i]\n                                if(onImage(x,y,det.box)){\n                                    var img = imageRef.current\n                                    var box = det.org_box\n                                    var copy_cvs = document.createElement(\"canvas\")\n                                    copy_cvs.height = box.height\n                                    copy_cvs.width = box.width\n                                    var copy_ctx = copy_cvs.getContext(\"2d\")\n                                    copy_ctx.drawImage(img,box.x,box.y,box.width,box.height,0,0,box.width,box.height)\n                                    var data = copy_cvs.toDataURL();\n                                    setFaceImgData(data)\n                                    // dispatch(set_face_img(data))\n                                    var image = new Image()\n                                    image.src = data\n                                    image.width = 160\n                                    image.height = 160\n                                    image.onload = async ()=>{\n                                        console.log(tf.version_core)\n                                        var input_tensor = tf.browser.fromPixels(image);\n                                        input_tensor = tf.expandDims(input_tensor,0)\n                                        input_tensor = input_tensor.sub(127.5).div(128)\n                                        var emb  = await facenet.predict(input_tensor)\n                                        emb = emb.div(tf.norm(emb))\n                                        emb = await emb.array()\n                                        var post_data = {\n                                            method:\"POST\",\n                                            body:JSON.stringify({vector:emb}),\n                                            headers: {\n                                                \"Content-Type\": \"application/json; charset=utf-8\",\n                                            }\n                                        }\n                                        fetch(api_urls[\"face_api\"]+\"/face\",post_data).then((res)=>(res.json())).then((res_json)=>{\n                                            console.log(\"res_json\",res_json)\n                                            setFaceList(res_json)\n                                            // dispatch(set_face_list(res_json))\n                                            // setIsProgress(false)\n                                            //setProgress(100)\n                                            //setFaceList(res_json)\n                                        })\n                                    }\n                                }\n                            }\n                        }}/>\n                    </div>\n                    {\n                        faceImgData && (\n                            <div className={classes.resultArea}>\n                                <Paper className={classes.resultPaper}> \n                                <Grid container spacing={3}>\n                                    <Grid item xs={3}>\n                                        <img width={80} height={80} className={classes.croppedImg} src={faceImgData}/>\n                                    </Grid>\n                                    <Grid item xs={9}>\n                                        <List className={classes.resultList}>\n                                            {\n                                                faceList.map((face,index)=>(\n                                                    <React.Fragment>\n                                                        <ListItem key={index} button component=\"a\" href={`https://www.wiretechnology.net/index.html?q=${face[0]}`}>\n                                                            <ListItemIcon>\n                                                                <Typography className={classes.listIconText}>\n                                                                    {index+1}.\n                                                                </Typography>\n                                                            </ListItemIcon>\n                                                            <ListItemText primary={face[0]}/>\n                                                            <ListItemSecondaryAction>\n                                                                <Avatar alt={face[0]} src={api_urls[\"static_api\"]+\"/image/\"+face[2]}/>\n                                                            </ListItemSecondaryAction>\n                                                        </ListItem>\n                                                        <Divider/>\n                                                    </React.Fragment>\n                                                ))\n                                            }\n                                        </List>\n                                    </Grid>\n                                </Grid>\n                                </Paper>\n                            </div>\n                        )\n                    }\n                </Container>\n            </div>\n\n        </React.Fragment>\n    )\n}\n\nexport default Capture","import React from 'react';\nimport './App.css';\n\nimport {theme} from \"./common/theme\"\n\nimport { makeStyles, useTheme,MuiThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\n\nimport {Link, Route, Switch,} from \"react-router-dom\";\n\nimport Bar from \"./bar\"\nimport Capture from \"./capture\"\n\nfunction App() {\n\n  return (\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline/>\n        <Bar/>\n        <Switch>\n          <Route>\n            <Capture/>\n          </Route>\n        </Switch>\n      </MuiThemeProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\nimport { connectRouter } from 'connected-react-router'\n\n\n\nconst createRootReducer = (history) => combineReducers({\n    router: connectRouter(history),\n    // setting\n  })\n\nexport default createRootReducer","import { createBrowserHistory } from 'history'\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { routerMiddleware } from 'connected-react-router'\nimport createRootReducer from './reducers'\n\n\nexport const history = createBrowserHistory()\n\n\n\nexport default function configureStore() {\n    const store = createStore(\n      createRootReducer(history), // root reducer with router state\n      compose(\n        applyMiddleware(\n          routerMiddleware(history), // for dispatching history actions\n          // ... other middlewares ...\n        ),\n      ),\n    )\n  \n    return store\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Provider} from \"react-redux\"\nimport configureStore, { history } from \"./common/store\"\nimport { ConnectedRouter } from 'connected-react-router'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}